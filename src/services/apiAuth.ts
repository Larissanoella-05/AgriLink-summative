import type { LoginData, SignupData } from "../interfaces"
import supabase, { supabaseUrl } from "./supabase"

export async function signUp({ email, password, firstName, lastName, phoneNumber }: SignupData) {
  try {
    // Step 1: Sign up the user
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          firstName,
          lastName,
          phoneNumber: phoneNumber || "",
          avatar: "", // Optional field for user profile images
        },
      },
    })

    // Step 2: Handle signup errors
    if (error) {
      console.error("Auth signup error:", error)
      throw new Error(`Signup failed: ${error.message}`)
    }

    const userId = data.user?.id // Get the user ID generated by Supabase

    if (!userId) {
      throw new Error("User ID is missing after signup.")
    }

    // Step 3: Insert the user data into the custom "authUsers" table
    // Use a slight delay to ensure the auth user is fully created
    await new Promise((resolve) => setTimeout(resolve, 100))

    const { data: userData, error: userDataError } = await supabase
      .from("authUsers")
      .insert([
        {
          authUserId: userId,
          firstName: firstName,
          lastName: lastName,
          email: email,
          phoneNumber: phoneNumber || "",
          avatar: "",
        },
      ])
      .select()

    // Step 4: Handle insertion errors
    if (userDataError) {
      console.error("AuthUsers insert error:", userDataError)
      // If the authUsers insert fails, we should clean up the auth user
      try {
        await supabase.auth.admin.deleteUser(userId)
      } catch (cleanupError) {
        console.error("Failed to cleanup auth user:", cleanupError)
      }
      throw new Error(`Failed to create user profile: ${userDataError.message}`)
    }

    return { data, userData }
  } catch (error) {
    console.error("Signup process error:", error)
    throw error
  }
}

export async function loginUser({ email, password }: LoginData) {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) {
      console.error("Login error:", error)
      throw new Error(error.message)
    }

    return data
  } catch (error) {
    console.error("Login process error:", error)
    throw error
  }
}

export async function getUser() {
  try {
    const { data: session } = await supabase.auth.getSession()
    if (!session.session) return null

    const { data, error } = await supabase.auth.getUser()
    if (error) {
      console.error("Get user error:", error)
      throw new Error(error.message)
    }

    return data?.user
  } catch (error) {
    console.error("Get user process error:", error)
    return null
  }
}

export async function logoutUser() {
  try {
    const { error } = await supabase.auth.signOut()
    if (error) {
      console.error("Logout error:", error)
      throw new Error(error.message)
    }
  } catch (error) {
    console.error("Logout process error:", error)
    throw error
  }
}

interface UserUpdate {
  firstName?: string
  lastName?: string
  password?: string
  phoneNumber?: string
}

export async function updateUser({ firstName, lastName, password, phoneNumber }: UserUpdate) {
  try {
    let updatedObject

    if (firstName || lastName || phoneNumber) {
      updatedObject = {
        data: {
          firstName,
          lastName,
          phoneNumber: phoneNumber || "",
        },
      }
    }
    if (password) {
      updatedObject = { password }
    }

    // Keep the existing auth table update logic unchanged
    const { data: updatedUser, error } = await supabase.auth.updateUser(updatedObject as UserUpdate)

    if (error) {
      console.error("Update user error:", error)
      throw new Error(error.message)
    }

    // Update the authUsers table
    const userId = updatedUser.user.id
    if (firstName || lastName || phoneNumber !== undefined) {
      const updateData: any = {}
      if (firstName) updateData.firstName = firstName
      if (lastName) updateData.lastName = lastName
      if (phoneNumber !== undefined) updateData.phoneNumber = phoneNumber

      const { error: authError } = await supabase.from("authUsers").update(updateData).eq("authUserId", userId)

      if (authError) {
        console.error("Update authUsers error:", authError)
        throw new Error(authError.message)
      }
    }

    return updatedUser
  } catch (error) {
    console.error("Update user process error:", error)
    throw error
  }
}

export async function UpdateProfileImage({ avatar }: { avatar: File }) {
  try {
    const fileName = `avatar-${avatar.name}-${Math.random()}`

    const { error: storageError } = await supabase.storage.from("avatars").upload(fileName, avatar)

    if (storageError) {
      console.error("Storage upload error:", storageError)
      throw new Error(storageError.message)
    }

    const { data: updatedUserAvatar, error: error2 } = await supabase.auth.updateUser({
      data: {
        avatar: `${supabaseUrl}/storage/v1/object/public/avatars/${fileName}`,
      },
    })

    if (error2) {
      console.error("Update user avatar error:", error2)
      throw new Error(error2.message)
    }

    const userId = updatedUserAvatar.user.id

    const { error: authError } = await supabase
      .from("authUsers")
      .update({
        avatar: `${supabaseUrl}/storage/v1/object/public/avatars/${fileName}`,
      })
      .eq("authUserId", userId)

    if (authError) {
      console.error("Update authUsers avatar error:", authError)
      throw new Error(authError.message)
    }

    return updatedUserAvatar
  } catch (error) {
    console.error("Update profile image process error:", error)
    throw error
  }
}
